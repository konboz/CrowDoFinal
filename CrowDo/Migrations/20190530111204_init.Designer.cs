// <auto-generated />
using System;
using CrowDo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrowDo.Migrations
{
    [DbContext(typeof(CrowDoDbContext))]
    [Migration("20190530111204_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrowDo.LinkingTable", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RewardPackageId");

                    b.Property<int>("ProjectId");

                    b.HasKey("UserId", "RewardPackageId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RewardPackageId");

                    b.ToTable("LinkingTable");
                });

            modelBuilder.Entity("CrowDo.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EstimatedDurationInMonths");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<decimal>("Funds");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsSuccessful");

                    b.Property<string>("ProjectCategory");

                    b.Property<decimal>("ProjectGoal");

                    b.Property<string>("ProjectName");

                    b.Property<string>("StatusUpdate");

                    b.Property<int?>("UserId");

                    b.Property<int>("Visits");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("CrowDo.ProjectMedia", b =>
                {
                    b.Property<int>("ProjectMediaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<int>("ProjectId");

                    b.HasKey("ProjectMediaId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMedia");
                });

            modelBuilder.Entity("CrowDo.RewardPackage", b =>
                {
                    b.Property<int>("RewardPackageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PackageName");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("RewardName");

                    b.HasKey("RewardPackageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("RewardPackage");
                });

            modelBuilder.Entity("CrowDo.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<int>("CreatedProjectsCount");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CrowDo.LinkingTable", b =>
                {
                    b.HasOne("CrowDo.Project", "Project")
                        .WithMany("LinkingTables")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrowDo.RewardPackage", "RewardPackage")
                        .WithMany()
                        .HasForeignKey("RewardPackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrowDo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDo.Project", b =>
                {
                    b.HasOne("CrowDo.User")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CrowDo.ProjectMedia", b =>
                {
                    b.HasOne("CrowDo.Project")
                        .WithMany("MultimediaFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDo.RewardPackage", b =>
                {
                    b.HasOne("CrowDo.Project")
                        .WithMany("RewardPackages")
                        .HasForeignKey("ProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
